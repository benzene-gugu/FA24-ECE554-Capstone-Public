
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module wrap(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);

wire clk, rst_n;
assign clk = CLOCK_50;


wire [31:0] result;

wire [31:0] in;
reg [31:0] op1, op2;

wire done;

reg [2:0] funct3;

reg ack;

assign in = {SW[9:8], {3{SW}}};

rst_synch rst_synch(.RST_n(KEY[0]), .clk(clk), .rst_n(rst_n));

import divide_multi_doomed_params_pkg::*;
divide_multi #(.OP_LN(OP_LN), .NUM_ITER(NUM_ITER), .XP_LN(XP_LEN)) iDUT(.clk(CLOCK_50), .rst_n(rst_n), .op1(op1), .op2(op2), .funct3(funct3), 
				.start(KEY[1]), .ack(ack), .result(result), .done(done));

assign LEDR[0] = ^result;
assign LEDR[1] = done;

reg [31:0] count;

always @(posedge clk, negedge rst_n) begin
	if (!rst_n)
		count = 32'h0;
	else
		count = count + 32'h1;
end

always @(posedge clk, negedge rst_n) begin
	if(!rst_n) begin
		op1 <= 0;
		op2 <= 0;
		ack <= 0;
		funct3 <= 0;
	end else begin
		op1 <= 32'hFFFFFFFF - count;
		op2 <= count ^ in;
		ack <= ^count;
		funct3 <= {|count, count[7], &count};
	end

end


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule
